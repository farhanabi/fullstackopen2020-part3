{"version":3,"sources":["services/notes.js","App.js","index.js"],"names":["baseUrl","axios","get","newObject","post","id","put","delete","Notification","message","className","ErrorNotification","Filter","onChange","filterValue","value","PersonForm","onSubmit","onNameChange","nameValue","onNumberChange","numberValue","type","Persons","contacts","deleteContact","map","person","key","name","number","onClick","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","notif","setNotif","errorMessage","setErrorMessage","useEffect","noteService","then","response","data","contactToShow","toUpperCase","includes","event","target","preventDefault","newContact","length","found","find","window","confirm","idx","findIndex","splice","console","log","setTimeout","catch","error","concat","contactDelete","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.41465c84.chunk.js","sourcesContent":["import axios from 'axios'\nconst baseUrl = 'api/persons'\n\nconst getAll = () => {\n\treturn axios.get(baseUrl)\n}\n\nconst create = (newObject) => {\n\treturn axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n\treturn axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nconst deletedata = (id) => {\n\treturn axios.delete(`${baseUrl}/${id}`)\n}\n\nexport default {getAll, create, update, deletedata}","import React, { useState, useEffect } from 'react'\nimport noteService from './services/notes'\n\nconst Notification = ({message}) => {\n  if (message === null) {\n    return null\n  } \n\n  return (\n    <div className='success'>\n      {message}\n    </div>\n  )\n}\n\nconst ErrorNotification = ({message}) => {\n  if (message === null) {\n    return null\n  } \n\n  return (\n    <div className='error'>\n      {message}\n    </div>\n  )\n}\n\nconst Filter = ({onChange,filterValue}) => {\n  return (\n    <div>\n      filter shown with <input onChange={onChange} value={filterValue}/>\n    </div>\n  )\n}\n\nconst PersonForm = ({onSubmit,onNameChange,nameValue,onNumberChange,numberValue}) => {\n  return (\n    <form onSubmit={onSubmit}>\n      <div>\n        name: <input onChange={onNameChange} value={nameValue}/>\n      </div>\n      <div>\n        number: <input onChange={onNumberChange} value={numberValue}/>\n      </div>\n      <div>\n        <button type=\"submit\">add</button>\n      </div>\n    </form>\n  )\n}\n\nconst Persons = ({contacts, deleteContact}) => {\n  return (\n    <div>\n      {contacts.map(person => \n        <div key={person.name}>\n          {person.name} {person.number} <button onClick={() => deleteContact(person.name)}>Delete</button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ notif, setNotif ] = useState(null)\n  const [ errorMessage, setErrorMessage ] = useState(null)\n\n  useEffect(()=>{\n    noteService\n      .getAll()\n      .then(response => {\n        setPersons(response.data)\n     })\n  },[])\n\n  const contactToShow = (filter === '')\n    ? persons\n    : persons.filter(person => person.name.toUpperCase().includes(filter.toUpperCase()))\n\n  const addContact = (event) => {\n    event.preventDefault()\n    const newContact = {\n      name: newName,\n      number: newNumber,\n      id: persons.length + 1\n    }\n\n    const found = persons.find(person => person.name === newName);\n\n    if (found) {\n      if (window.confirm(`${found.name} is already added to phonebook, replace the old number with a new one?`)) { \n      newContact.id = found.id\n      noteService\n        .update(found.id,newContact)\n        .then(response => {\n          const idx = persons.findIndex(person => person.name === found.name)\n          persons.splice(idx,1,newContact)\n          console.log(idx)\n          setNewName('')\n          setNewNumber('')\n          setPersons(persons)\n          setNotif(`Changed ${newContact.name}`)\n          setTimeout(()=>setNotif(null), 5000)\n        })\n        .catch(error => {\n          setErrorMessage(error)\n          setTimeout(()=>setErrorMessage(null), 5000)\n          setPersons(persons.filter(person => person.name !== newContact.name))\n        })\n    }}\n    else {\n      noteService\n        .create(newContact)\n        .then(response => {\n          setPersons(persons.concat(newContact))\n          setNewName('')\n          setNewNumber('')\n          setNotif(`Added ${newContact.name}`)\n          setTimeout(()=>setNotif(null), 5000)\n        })\n    }\n  }\n\n  const contactDelete = (name) => {\n    if (window.confirm(`Delete ${name}?`)) { \n      const id = persons.find(person => person.name === name).id\n      noteService\n        .deletedata(id)\n        .then(response => {\n          setPersons(persons.filter(person => person.name !== name))\n          })\n        .catch(error => {\n          setErrorMessage(`Information of ${name} has already been removed from server`)\n          setTimeout(()=>setErrorMessage(null), 5000)\n          setPersons(persons.filter(person => person.name !== name))\n          })    \n  }}\n\n  const filterChangeHandler = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const nameChangeHandler = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const numberChangeHandler = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notif}/>\n      <ErrorNotification message={errorMessage}/>\n      <Filter onChange={filterChangeHandler} filterValue={filter}/>\n      <h3>add a new</h3>\n      <PersonForm\n        onSubmit={addContact}\n        onNameChange={nameChangeHandler} nameValue={newName}\n        onNumberChange={numberChangeHandler} numberValue={newNumber}\n      />\n      <h3>Numbers</h3>\n      <Persons contacts={contactToShow} deleteContact={(name) => contactDelete(name)}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}